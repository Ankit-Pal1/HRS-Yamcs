syntax="proto2";

package yamcs.protobuf.commanding;

option java_package = "org.yamcs.protobuf";
option java_outer_classname = "QueueServiceProto";
option java_multiple_files = true;

import "google/protobuf/empty.proto";

import "yamcs/api/annotations.proto";
import "yamcs/protobuf/commanding/commanding.proto";

service QueueApi {

  // List command queues
  rpc ListQueues(ListQueuesRequest) returns (ListQueuesResponse) {
    option (yamcs.api.route) = {
      get: "/api/processors/{instance}/{processor}/queues"
    };
  }
  
  // Get a command queue
  rpc GetQueue(GetQueueRequest) returns (CommandQueueInfo) {
    option (yamcs.api.route) = {
      get: "/api/processors/{instance}/{processor}/queues/{name}"
    };
  }
  
  // Update a command queue
  rpc UpdateQueue(EditQueueRequest) returns (CommandQueueInfo) {
    option (yamcs.api.route) = {
      patch: "/api/processors/{instance}/{processor}/queues/{name}"
      body: "*"
    };
  }
  
  // Receive updates on queue stats
  rpc SubscribeQueueStatistics(SubscribeQueueStatisticsRequest) returns (stream CommandQueueInfo) {
    option (yamcs.api.websocket) = {
      topic: "queue-stats"
    };
  }
  
  // Receive updates on queue events
  rpc SubscribeQueueEvents(SubscribeQueueEventsRequest) returns (stream CommandQueueEvent) {
    option (yamcs.api.websocket) = {
      topic: "queue-events"
    };
  }
  
  // List command queue entries
  rpc ListQueueEntries(ListQueueEntriesRequest) returns (ListQueueEntriesResponse) {
    option (yamcs.api.route) = {
      get: "/api/processors/{instance}/{processor}/queues/{name}/entries"
    };
  }
  
  // Update a command queue entry
  rpc UpdateQueueEntry(EditQueueEntryRequest) returns (google.protobuf.Empty) {
    option (yamcs.api.route) = {
      patch: "/api/processors/{instance}/{processor}/queues/{name}/entries/{uuid}"
      body: "*"
    };
  }
}

message ListQueuesRequest {
  // Yamcs instance namee.
  optional string instance = 1;
  
  // Processor name.
  optional string processor = 2;
}

message ListQueuesResponse {
  repeated CommandQueueInfo queues = 1;
}

message SubscribeQueueStatisticsRequest {
  // Yamcs instance name.
  optional string instance = 1;
  
  // Processor name.
  optional string processor = 2;
}

message SubscribeQueueEventsRequest {
  // Yamcs instance name.
  optional string instance = 1;
  
  // Processor name.
  optional string processor = 2;
}

message GetQueueRequest {
  // Yamcs instance name.
  optional string instance = 1;
  
  // Processor name.
  optional string processor = 2;
  
  // Queue name.
  optional string name = 3;
}

message EditQueueRequest {
  // Yamcs instance name.
  optional string instance = 1;
  
  // Processor name.
  optional string processor = 2;
  
  // Queue name.
  optional string name = 3;

  // The state of the queue. Either ``enabled``, ``disabled`` or ``blocked``.
  optional string state = 4;
}

message ListQueueEntriesRequest {
  // Yamcs instance name.
  optional string instance = 1;
  
  // Processor name.
  optional string processor = 2;
  
  // Queue name.
  optional string name = 3;
}

message ListQueueEntriesResponse {
  repeated CommandQueueEntry entries = 1;
}

message EditQueueEntryRequest {
  // Yamcs instance name.
  optional string instance = 1;
  
  // Processor name.
  optional string processor = 2;
  
  // Queue name.
  optional string name = 3;
  
  optional string uuid = 4;
  
  // The state of the entry. Either ``released`` or ``rejected``.
  optional string state = 5;
}
